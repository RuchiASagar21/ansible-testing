[What this project is]:
This project is an engineering effort to create a standard, out-of-box product offering for RCH to customers that need new stuff created.


[arch64]
- vagrant init -f rocky8 https://dl.rockylinux.org/pub/rocky/8/images/aarch64/Rocky-8-Vagrant-Vbox-8.10-20240528.0.aarch64.box
- vagrant up
- vagrant ssh


[objectives-supported-technologies]:
- Boltz
- CCDC
- Chemaxon
- Cryo-em
- Jupyterhub?
- Moe
- Pheonix
- Posit (in-progress, rstudio-connect, rstudio-workbench, and rstudio-package-manager)
- Reliion
- Schr√∂dinger
- Spotfire


[objectives-structural-and-technical]
- split selinux and umask steps out of base_packages and into separate "security" role
- create aws ssm param store keys for secrets to be used with ansible scripts
- create aws secret manager keys for secrets to be used with ansible scripts
- create an RDS database for use with posit ansible?
- remove dev/test/prod var files
- create var files for rhel8
- create var files for rhel9
- create var files for ubuntu24
- create var files for other supported OS (determine what these are)
- create a var-overrides file and folder that has all role-specific secret-related vars for each over-riding at the cli, to be used with playbooks
- update documentation
        - create placeholder tokens (example: $CUSTOMERNAME)
    - create sed or other script to read in the markdown document and a var file and replace all placeholders with the value of the vars
    - should result in either a customer-presentable markdown document or a customer-presentable pdf document


[open questions]
yes - do we need region-specific vars? (us-east-1, us-west-2, ap-southeast-2, etc)
no - do we need account-specific vars
- do we need a directory for customer-specific var overrides?
- how to handle secrets - require ssm, require secret manager, ansible vault, something else?
- may need to configure vagrant vm to allow testing of the posit software, or other tools installed on it?  such as ports, access, etc.  Need some way of testing that we have installed a properly configured system that works, and not just ensured that the ansible scripts are not generating errors



[SETUP]
- git repository:
    - git repository access completed?
    - git repository cloned to local machine?
    - local git config file created to ignore line-endings (different between windows, mac, and linux)?
        - `git config --global core.autocrlf true`
        - 
- code editor:
    - everybody has a plain-text editor of some sort installed?  NO Word allowed
    - code editor configured to use 4 white spaces instead of tabs?
- vagrant vm:
    - vagrant vm (rocky8) provisioned and using the vagrant-setup.sh?
    - you can clone the ansible repo inside the vagrant vm?
- ansible:
    - reviewed the ansible roles and code?
    - ran the playbooks/base_packages.yml on the rocky8 vm successfully?
- project-tracking:
    - feature backlog created?
    - technical backlog created?
    - sprint defined and tickets created?



