#
# ~/.bash_profile_$USERNAME
#

printf "\n"
export MY_BIN=~/bin
export USR_LOCAL_SBIN=/usr/local/sbin
export USR_LOCAL_BIN=/usr/local/bin
export PATH=$MY_BIN:$PATH
export PATH=$SCRIPT_PATH:$PATH
export PATH=$USR_LOCAL_BIN:$PATH
export PATH=$USR_LOCAL_SBIN:$PATH
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
export PATH=~/.local/bin:$PATH


#------------------------------------------#
# Colors:                                  #
#------------------------------------------#
black='\x1B[0;30m'
blue='\x1B[0;34m'
green='\x1B[0;32m'
cyan='\x1B[0;36m'
red='\x1B[0;31m'
purple='\x1B[0;35m'
brown='\x1B[0;33m'
lightgray='\x1B[0;37m'
darkgray='\x1B[1;30m'
lightblue='\x1B[1;34m'
lightgreen='\x1B[1;32m'
lightcyan='\x1B[1;36m'
lightred='\x1B[1;31m'
lightpurple='\x1B[1;35m'
yellow='\x1B[1;33m'
white='\x1B[1;37m'
nc='\x1B[0m'

#return-value visualisation
#source=https://wiki.archlinux.org/index.php/Color_Bash_Prompt
if [[ $(echo $HOSTNAME | grep -c MacBook-Pro.local) == 1 ]]; then
    PS1="\$? \$(if [[ \$? == 0 ]]; then echo \"\[\033[01;32m\]\342\234\223\"; else echo \"\[\033[01;31m\]\342\234\227\"; fi) $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\e[31m\][MAC]\[\e[m\]\w \$\[\033[00m\]"
elif [[ $(echo $HOSTNAME | grep -c vagrant) == 1 ]]; then
    PS1="\$? \$(if [[ \$? == 0 ]]; then echo \"\[\033[01;32m\]\342\234\223\"; else echo \"\[\033[01;31m\]\342\234\227\"; fi) $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] [VAGRANT]\[\e[m\]\w \$\[\033[00m\]"
else
    PS1="\[\033[01;37m\]\$? \$(if [[ \$? == 0 ]]; then echo \"\[\033[01;32m\]\342\234\223\"; else echo \"\[\033[01;31m\]\342\234\227\"; fi) $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$\[\033[00m\] "
fi

eval "$(ssh-agent -s)"
ssh-add -K ~/.ssh/"$USER".pem

#------------------------------------------#
# functions                                #
#------------------------------------------#

password_hash()
{
    read -p 'password to hash:  ' pass
    echo -n "$pass" | sha1sum | xxd -r -p | sha1sum | tr '[a-z]' '[A-Z]' | awk '{printf "*%s", $1}'
    echo ""
}

password_openssl()
{
    if ! [[ -z "$1" ]]; then
        pw_length="$1"
    else
        read -p 'password length:  ' pw_length
    fi
    echo $(openssl rand -base64 "$pw_length")
    echo
}

password_random()
{
    if ! [[ -z "$1" ]]; then
        pw_length="$1"
    else
        read -p 'password length:  ' pw_length
    fi

    pwgen --numerals --symbols $pw_length
}

password_secure()
{
    if ! [[ -z "$1" ]]; then
        pw_length="$1"
    else
        read -p 'password length:  ' pw_length
    fi

    pwgen --numerals --symbols --secure $pw_length
}

password_urandom()
{
    if ! [[ -z "$1" ]]; then
        pw_length="$1"
    else
        read -p 'password length:  ' pw_length
    fi
    LC_ALL=C tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' </dev/urandom | head -c "$pw_length" ; echo
    echo
}


help()
{
    printf "\nAvailable Functions:"
    printf "\n\thelp:               Displays this message"
    printf "\n\tpassword_hash:      Takes a password and hashes it equivalently to mysql's"
    printf "\n\tpassword_openssl:   Generates a password of specified length using openssl"
    printf "\n\tpassword_random:    Generates a password of specified length using pwgen"
    printf "\n\tpassword_secure:    Generates a secure password of specified length using pwgen"
    printf "\n\tpassword_urandom:   Generates a password of specified length using /dev/urandom"
    printf "\n"
}